
# DNS Records the the important entry-points in the stack. 
# Each entry embeds the stack name, to allow multiple simultaneous deploys.
#
#    logs.<stack>.profileinthecloud.net:  the log collection server
#    idp.<stack>.profileinthecloud.net:   the loadbalancer fronting webheads
#

DNSRecords:
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneName: "profileinthecloud.net."
    RecordSets:
      - Name: {"Fn::Join": [".", ["logs", {"Ref": "AWS::StackName"}, "profileinthecloud.net."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["LogServer", "PublicDnsName"]}
      - Name: {"Fn::Join": [".", ["idp", {"Ref": "AWS::StackName"}, "profileinthecloud.net."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["IdpLoadBalancer", "DNSName"]}


# The log-collecting server, and associated infra.

LogServer:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.small
    ImageId: { "Ref": "LogBoxAMI" }
    KeyName: { "Ref": "AWSBoxDeployKey" }
    SecurityGroups:
      - {"Ref": "LogServerSecurityGroup"}


LogServerSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: "Enable external HTTP(S) and SSH access and internal elasticsearch"
    SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: "80"
        ToPort: "80"
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: "443"
        ToPort: "443"
        CidrIp: "0.0.0.0/0"
      - IpProtocol: "tcp"
        FromPort: "8000"
        ToPort: "12000"
        SourceSecurityGroupName: {"Ref": "IdpServerSecurityGroup"}


# The IDP webheads, and associated infra.
# These machines are stateless, so we run an auto-scaling group of them


IdpLoadBalancer:
  Type: AWS::ElasticLoadBalancing::LoadBalancer
  Properties:
    AvailabilityZones: {"Fn::GetAZs": ""}
    Listeners:
      - LoadBalancerPort: "80"
        InstancePort: "80"
        Protocol: "HTTP"
      - LoadBalancerPort: "443"
        InstancePort: "80"
        Protocol: "HTTPS"
        InstanceProtocol: "HTTP"
        SSLCertificateId: "arn:aws:iam::142069644989:server-certificate/profileinthecloud.net"
    HealthCheck:
      Target: "HTTP:80/"
      HealthyThreshold: "2"
      UnhealthyThreshold: "5"
      Interval: "10"
      Timeout: "5"


IdpAutoScaleGroup:
  Type: AWS::AutoScaling::AutoScalingGroup
  Properties:
    AvailabilityZones: { "Fn::GetAZs": ""}
    LaunchConfigurationName: { "Ref": "IdpServerLaunchConfig" }
    DesiredCapacity: "2"
    MinSize: "2"
    MaxSize: "2"
    LoadBalancerNames:
      - {"Ref": "IdpLoadBalancer"}


IdpServerLaunchConfig:
  Type: AWS::AutoScaling::LaunchConfiguration
  Properties:
    InstanceType: m1.small
    ImageId: { "Ref": "IdpBoxAMI" }
    KeyName: { "Ref": "AWSBoxDeployKey" }
    SecurityGroups:
      - {"Ref": "IdpServerSecurityGroup"}
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      "/opt/aws/bin/cfn-init -s ", {"Ref": "AWS::StackId"}, " -r IdpServerLaunchConfig\n"
       ]]}}
  Metadata:
    AWS::CloudFormation::Init:
     config:
       files:
         /home/app/cloud_formation.json:
           content:
             secretKeyFile: "/home/app/var/secret-key.json"
             publicKeyFile: "/home/app/var/public-key.json"
             kvstore:
               backend: "cassandra"
               cache: "memcached"
             cassandra:
               hosts:
                 - {"Fn::Join": [".", ["db1", {"Ref": "AWS::StackName"}, "profileinthecloud.net"]]}
                 - {"Fn::Join": [".", ["db2", {"Ref": "AWS::StackName"}, "profileinthecloud.net"]]}
                 - {"Fn::Join": [".", ["db3", {"Ref": "AWS::StackName"}, "profileinthecloud.net"]]}
               keyspace: "picl"
               create_schema: true
             memcached:
               hosts: {"Fn::Join": ["", [
                  {"Fn::GetAtt": ["Cache", "ConfigurationEndpoint.Address"]},
                  ":",
                  {"Fn::GetAtt": ["Cache", "ConfigurationEndpoint.Port"]}
                      ]]}


IdpServerSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: "Enable external HTTP(S) and SSH access"
    SecurityGroupIngress:
      - IpProtocol: "tcp"
        FromPort: "22"
        ToPort: "22"
        CidrIp: "0.0.0.0/0"


IdpSecurityGroupIngressForLoadBalancer:
  # Allow port 80 ingress from the load balancer.
  # This has to be a separate resources to avoid circular references
  # between the LoadBalancer and the LaunchConfig.
  Type: AWS::EC2::SecurityGroupIngress
  Properties:
    GroupName: {"Ref": "IdpServerSecurityGroup"}
    IpProtocol: "tcp"
    FromPort: "80"
    ToPort: "80"
    SourceSecurityGroupOwnerId: {"Fn::GetAtt": ["IdpLoadBalancer", "SourceSecurityGroup.OwnerAlias"]}
    SourceSecurityGroupName: {"Fn::GetAtt": ["IdpLoadBalancer", "SourceSecurityGroup.GroupName"]}


# The session-store cache, and supporting infra.
# It's an elasticache store for now, but it might make sense
# to put this on the webheads, or write it into cassandra.

Cache:
  Type: AWS::ElastiCache::CacheCluster
  Properties:
    CacheNodeType: cache.m1.small
    NumCacheNodes: "1"
    Engine: memcached
    CacheSecurityGroupNames:
      - {"Ref": "CacheSecurityGroup"}


CacheSecurityGroup:
  Type: AWS::ElastiCache::SecurityGroup
  Properties:
    Description: IDP server session-store cache


CacheSecurityGroupIngress:
  Type: AWS::ElastiCache::SecurityGroupIngress
  Properties:
    CacheSecurityGroupName: { "Ref": "CacheSecurityGroup"}
    EC2SecurityGroupName: { "Ref": "IdpServerSecurityGroup"}


# The backend database, and supporting infra.
# This is a minimalistic cassandra cluster.  Lots of work to be done.
# Things I want to do:
#     - put a loadbalancer in front for clients to connect
#     - make it an auto-bootstrapping autoscale group.


DBServer1:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.small
    ImageId: { "Ref": "DBBoxAMI" }
    KeyName: { "Ref": "AWSBoxDeployKey" }
    SecurityGroups:
      - {"Ref": "DBServerSecurityGroup"}
    # Make this node use itself as seed node.
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      "ME=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\n",
      "perl -pi -e 's/seeds: \"127.0.0.1\"/seeds: \"'$ME'\"/g' ",
          "/opt/cassandra/conf/cassandra.yaml\n"
      ]]}}


DBServer2:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.small
    ImageId: { "Ref": "DBBoxAMI" }
    KeyName: { "Ref": "AWSBoxDeployKey" }
    SecurityGroups:
      - {"Ref": "DBServerSecurityGroup"}
    # Make this node use DBServer1 as seed node.
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      "perl -pi -e 's/seeds: \"127.0.0.1\"/seeds: \"",
          {"Fn::GetAtt": ["DBServer1", "PrivateIp"]},
          "\"/g' /opt/cassandra/conf/cassandra.yaml\n"
      ]]}}


DBServer3:
  Type: AWS::EC2::Instance
  Properties:
    InstanceType: m1.small
    ImageId: { "Ref": "DBBoxAMI" }
    KeyName: { "Ref": "AWSBoxDeployKey" }
    SecurityGroups:
      - {"Ref": "DBServerSecurityGroup"}
    # Make this node use DBServer1 as seed node.
    UserData: {"Fn::Base64": {"Fn::Join": ["", [
      "#!/bin/bash\n",
      "set -e -x\n",
      "perl -pi -e 's/seeds: \"127.0.0.1\"/seeds: \"",
          {"Fn::GetAtt": ["DBServer1", "PrivateIp"]},
          "\"/g' /opt/cassandra/conf/cassandra.yaml\n"
      ]]}}


DBServerSecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    GroupDescription: "Enable Cassandra and SSH access"
    SecurityGroupIngress:
      # Allow ssh ingress from anywhere.
      - IpProtocol: "tcp"
        FromPort: "22"
        ToPort: "22"
        CidrIp: "0.0.0.0/0"
      # Allow client api access from anywhere
      - IpProtocol: "tcp"
        FromPort: "9160"
        ToPort: "9160"
        SourceSecurityGroupName: {"Ref": "IdpServerSecurityGroup"}


DBSecurityGroupIngressForPeers:
  # Allow peer access to all ports
  Type: AWS::EC2::SecurityGroupIngress
  Properties:
    GroupName: {"Ref": "DBServerSecurityGroup"}
    IpProtocol: "tcp"
    FromPort: "0"
    ToPort: "65535"
    SourceSecurityGroupName: {"Ref": "DBServerSecurityGroup"}


DNSRecordsForDB:
  Type: AWS::Route53::RecordSetGroup
  Properties:
    HostedZoneName: "profileinthecloud.net."
    RecordSets:
      - Name: {"Fn::Join": [".", ["db1", {"Ref": "AWS::StackName"}, "profileinthecloud.net."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["DBServer1", "PublicDnsName"]}
      - Name: {"Fn::Join": [".", ["db2", {"Ref": "AWS::StackName"}, "profileinthecloud.net."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["DBServer2", "PublicDnsName"]}
      - Name: {"Fn::Join": [".", ["db3", {"Ref": "AWS::StackName"}, "profileinthecloud.net."]]}
        Type: CNAME
        TTL: "30"
        ResourceRecords:
          - {"Fn::GetAtt": ["DBServer3", "PublicDnsName"]}
